{"version":3,"sources":["components/common/spinner.gif","components/books/Book.js","components/books/ViewBooks.js","components/common/Spinner.js","components/layout/Button.js","components/layout/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Book","book","this","props","author","price","link","thumbnail","react_default","a","createElement","className","src","alt","volumeInfo","title","imageLinks","authors","saleInfo","retailPrice","currencyCode","amount","previewLink","error","bookDetails","href","target","rel","substr","Component","ViewBooks","result","items","map","item","index","components_books_Book","key","Spinner","spinner","style","width","margin","display","Button","type","onClick","onNext","float","cursor","disbaleNext","disabled","onPrevious","disablePrev","Navbar","state","searchText","searchquery","resultIndex","onChange","e","_this","setState","Object","defineProperty","name","value","onSubmit","alert","fetch","concat","then","response","json","resData","totalItems","_this2","viewBooks","loading","books_ViewBooks","length","placeholder","components_layout_Button","App","layout_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fe9a7af4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.2f212d1f.gif\";","import React, { Component } from \"react\";\r\n\r\nimport \"./Book.css\";\r\n\r\nclass Book extends Component {\r\n  render() {\r\n    const book = this.props.book;\r\n    // Initialized variables.\r\n    let author = \"No author found\";\r\n    let price = \"Price not available\";\r\n    let link = \"#\";\r\n\r\n    // Get the thumbnail of the book from the result from Main.\r\n    // Use the result as props to get the data.\r\n    // If there's no thumbnail I use a placeholder I got from the web.\r\n    let thumbnail = (\r\n      <img\r\n        className=\"thumbnail\"\r\n        src=\"http://www.sclance.com/pngs/image-placeholder-png/image_placeholder_png_698120.png\"\r\n        alt={book.volumeInfo.title + \"_thumbnail\"}\r\n      />\r\n    );\r\n    try {\r\n      thumbnail = (\r\n        <img\r\n          className=\"thumbnail\"\r\n          src={book.volumeInfo.imageLinks.thumbnail}\r\n          alt={book.volumeInfo.title + \"_thumbnail\"}\r\n        />\r\n      );\r\n\r\n      // Get the first author\r\n      author = book.volumeInfo.authors[0];\r\n      // Concatenate the Currency code and the price.\r\n      price =\r\n        book.saleInfo.retailPrice.currencyCode +\r\n        \" \" +\r\n        book.saleInfo.retailPrice.amount;\r\n      // Get the link if the book.\r\n      link = book.volumeInfo.previewLink;\r\n    } catch (error) {}\r\n\r\n    let bookDetails = (\r\n      <div className=\"book\">\r\n        <a\r\n          href={link}\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          className=\"bookItem\"\r\n        >\r\n          {thumbnail}\r\n        </a>\r\n        <b className=\"bookTitle\">\r\n          {book.volumeInfo.title.substr(0, 40) + \"...\"}\r\n        </b>\r\n        <p className=\"author\">{author}</p>\r\n        <p className=\"price\">{price}</p>\r\n      </div>\r\n    );\r\n    return <div className=\"books\">{bookDetails}</div>;\r\n  }\r\n}\r\n\r\nexport default Book;\r\n","import React, { Component } from \"react\";\r\nimport Book from \"./Book\";\r\n\r\nclass ViewBooks extends Component {\r\n  render() {\r\n    return this.props.result.items.map((item, index) => (\r\n      <Book key={index} book={item} />\r\n    ));\r\n  }\r\n}\r\n\r\nexport default ViewBooks;\r\n","import React from \"react\";\r\nimport spinner from \"./spinner.gif\";\r\n\r\nexport default function Spinner() {\r\n  return (\r\n    <div>\r\n      <img\r\n        src={spinner}\r\n        style={{ width: \"60px\", margin: \"10% auto\", display: \"block\" }}\r\n        alt=\"Loading...\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./Button.css\";\r\n\r\nclass Button extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"btnContainer\">\r\n        <button\r\n          className=\"nextBtn\"\r\n          type=\"button\"\r\n          onClick={this.props.onNext}\r\n          style={{\r\n            float: \"right\",\r\n            cursor: this.props.disbaleNext ? \"not-allowed\" : \"pointer\"\r\n          }}\r\n          disabled={this.props.disbaleNext}\r\n        >\r\n          Next\r\n        </button>\r\n        <button\r\n          className=\"prevBtn\"\r\n          type=\"button\"\r\n          onClick={this.props.onPrevious}\r\n          style={{\r\n            float: \"right\",\r\n            cursor: this.props.disablePrev ? \"not-allowed\" : \"pointer\"\r\n          }}\r\n          disabled={this.props.disablePrev}\r\n        >\r\n          Previous\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Button;\r\n","import React, { Component } from \"react\";\r\nimport ViewBooks from \"../books/ViewBooks\";\r\nimport Spinner from \"../common/Spinner\";\r\nimport Button from \"./Button\";\r\n\r\nimport \"./Main.css\";\r\n\r\nclass Navbar extends Component {\r\n  state = {\r\n    searchText: \"\",\r\n    searchquery: \"Harry Potter\",\r\n    resultIndex: 0,\r\n    result: null\r\n  };\r\n\r\n  // Show \"Harry Potter\" as the first search.\r\n  componentWillMount() {\r\n    fetch(\r\n      `https://www.googleapis.com/books/v1/volumes?q=${\r\n        this.state.searchquery\r\n      }&startIndex=${this.state.resultIndex}&maxResults=40`\r\n    )\r\n      .then(response => response.json())\r\n      .then(resData => {\r\n        this.setState({ result: resData });\r\n      });\r\n  }\r\n\r\n  onChange = e => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n\r\n  // Search button function, fetched the books according to the word typed in the search box.\r\n  onSubmit = e => {\r\n    if (this.state.searchText === \"\") {\r\n      alert(\"Please type something.\");\r\n    } else {\r\n      this.setState(\r\n        { result: null, searchquery: this.state.searchText },\r\n        // Callback function so it will change the state first before fetching again.\r\n        () => {\r\n          fetch(\r\n            `https://www.googleapis.com/books/v1/volumes?q=${\r\n              this.state.searchquery\r\n            }&startIndex=${this.state.resultIndex}&maxResults=40`\r\n          )\r\n            .then(response => response.json())\r\n            .then(resData => {\r\n              this.setState({ result: resData, resultIndex: 0 });\r\n            });\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  // Previous button function, fetched the next 40 books.\r\n  onNext = e => {\r\n    let index = this.state.resultIndex + 40;\r\n    if (index > this.state.result.totalItems) {\r\n      index = this.state.result.totalItems - 40;\r\n    }\r\n    try {\r\n      this.setState({ resultIndex: index, result: null }, () =>\r\n        fetch(\r\n          `https://www.googleapis.com/books/v1/volumes?q=${\r\n            this.state.searchquery\r\n          }&startIndex=${this.state.resultIndex}&maxResults=40`\r\n        )\r\n          .then(response => response.json())\r\n          .then(resData => {\r\n            this.setState({ result: resData });\r\n          })\r\n      );\r\n    } catch (error) {}\r\n  };\r\n\r\n  // Previous button function, fetched the previous 40 books.\r\n  onPrevious = e => {\r\n    let index = this.state.resultIndex - 40;\r\n    if (index < 0) {\r\n      index = 0;\r\n    }\r\n\r\n    this.setState({ resultIndex: index, result: null }, () =>\r\n      fetch(\r\n        `https://www.googleapis.com/books/v1/volumes?q=${\r\n          this.state.searchquery\r\n        }&startIndex=${this.state.resultIndex}&maxResults=40`\r\n      )\r\n        .then(response => response.json())\r\n        .then(resData => {\r\n          this.setState({ result: resData });\r\n        })\r\n    );\r\n  };\r\n\r\n  render() {\r\n    let viewBooks;\r\n    // Show spinner if data is still being fetched.\r\n    let loading = <Spinner />;\r\n    // Previous and Next button disbale property, set to disabled if data is being fecthed or there's no more books.\r\n    let disbaleNext = true;\r\n    let disablePrev = true;\r\n    if (this.state.result !== null) {\r\n      // Pass results as props to ViewBooks.\r\n      viewBooks = <ViewBooks result={this.state.result} />;\r\n      // Make loading gone as the results are fetched.\r\n      loading = false;\r\n\r\n      // Make the previous and next button clickable.\r\n      disbaleNext = false;\r\n      disablePrev = false;\r\n\r\n      // If theres is no more books to be fetched, disable the next button.\r\n      if (this.state.result.items.length < 40) {\r\n        disbaleNext = true;\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className=\"main\">\r\n        <div className=\"navbar\">\r\n          <div className=\"search\">\r\n            <input\r\n              className=\"searchbox\"\r\n              type=\"text\"\r\n              placeholder=\"Search books...\"\r\n              name=\"searchText\"\r\n              value={this.state.searchText}\r\n              onChange={this.onChange}\r\n            />\r\n            <button className=\"searchbutton\" onClick={this.onSubmit}>\r\n              Search\r\n            </button>\r\n          </div>\r\n        </div>\r\n        {loading}\r\n        <div className=\"mainBooks\">{viewBooks}</div>\r\n        <Button\r\n          disablePrev={disablePrev}\r\n          disbaleNext={disbaleNext}\r\n          onPrevious={this.onPrevious}\r\n          onNext={this.onNext}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\nimport Main from \"./components/layout/Main\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Main />\n        <footer className=\"footer\">Google Books API &copy;</footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}